/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package legrosdebrouillard;

import TSPModel_PtiDeb.TSPModel_PtiDeb;
import TSPModel_PtiDeb.point.Point;
import TSPModel_PtiDeb.point.PointList;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.LayoutManager;
import java.awt.PopupMenu;
import java.io.BufferedReader;
import java.io.FileReader;
import javax.swing.*;
import org.graphstream.graph.*;
import org.graphstream.graph.implementations.DefaultGraph;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.ui.swingViewer.ViewPanel;
import org.graphstream.ui.view.*;

import java.util.Observable;
import java.util.Observer;

/**
 *
 * @author Thomas
 */
public class Test extends javax.swing.JFrame implements Observer {

    /**
     * Creates new form Test
     */
    public Test() {
        initComponents();
        remplirGraph();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setEnabled(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(450, 400));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setPreferredSize(new java.awt.Dimension(450, 400));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jButton3.setText("Lancer");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addGap(437, 437, 437)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
       model = new TSPModel_PtiDeb(this);
       
       try {
            FileReader fr = new FileReader(path);
            BufferedReader br = new BufferedReader(fr);
            String line;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                model.addPoint(Integer.parseInt(values[0]), Integer.parseInt(values[1]), Integer.parseInt(values[2]));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
       Thread thread = new Thread(model) ;
       thread.start();
    }//GEN-LAST:event_jButton3MouseClicked
    
    private void lireFichierCSV() {
        Graph tmp = new SingleGraph("test") ;
        
        try {
            FileReader fr = new FileReader(path);
            BufferedReader br = new BufferedReader(fr);
            String line;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                
                Node node = this.best.addNode(String.valueOf(Integer.parseInt(values[0]))) ;
                Node nodeC = this.current.addNode(String.valueOf(Integer.parseInt(values[0]))) ;
                node.setAttribute("xy", Integer.parseInt(values[1]), Integer.parseInt(values[2]));
                nodeC.setAttribute("xy", Integer.parseInt(values[1]), Integer.parseInt(values[2]));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void remplirGraph() {
        this.lireFichierCSV();
        this.best.addAttribute("ui.quality");
        this.best.addAttribute("ui.antialias");
        this.current.addAttribute("ui.quality");
        this.current.addAttribute("ui.antialias");
        
        this.best.setAutoCreate(true);
        this.best.setStrict(true);
        Viewer viewer = new Viewer(this.best, Viewer.ThreadingModel.GRAPH_IN_GUI_THREAD);
        viewer.addDefaultView(false);
        ViewPanel viewPanel = viewer.addDefaultView(false);
        jPanel1.add(viewPanel);
        this.add(jPanel1);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        
        this.current.setAutoCreate(true);
        this.current.setStrict(true);
        Viewer viewerV2 = new Viewer(this.current, Viewer.ThreadingModel.GRAPH_IN_GUI_THREAD);
        viewerV2.addDefaultView(false);
        ViewPanel viewPanelV2 = viewerV2.addDefaultView(false);
        jPanel2.add(viewPanelV2);
        this.add(jPanel2);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Test().setVisible(true);
            }
        });
    }
    
    
    TSPModel_PtiDeb model ;
    private String path = "F:\\Documents\\NetBeansProjects\\LeGrosDebrouillard\\src\\CSV\\Default.csv" ;
    private Graph current = new SingleGraph("current");
    private Graph best = new SingleGraph("best");
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof TSPModel_PtiDeb) {
            TSPModel_PtiDeb model = (TSPModel_PtiDeb) o;
            int id = model.getSegmentID();
            int p1 = model.getSegmentP1();
            int p2 = model.getSegmentP2();
            switch (model.getAction()) {
                case Add:
                    addToGraph(id, p1, p2);
                    break;
                case Remove:
                    removeFromGraph(id);
                    break;
                case NewBest:
                    updateBest();
                    break;
                case Finish:
                    finish();
                    break;
            }
            try {
                Thread.sleep(250);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
     public void addToGraph(int id, int p1, int p2) {
        this.best.addEdge(Integer.toString(id), Integer.toString(p1), Integer.toString(p2));
    }

    public void removeFromGraph(int id) {
        this.best.removeEdge(Integer.toString(id));
    }

    public void updateBest() {
        while(this.current.getEdgeCount() > 0) {
            this.current.removeEdge(0);
        }
        for (Edge edge : this.best.getEachEdge()) {
            this.current.addEdge(edge.getId(), edge.getSourceNode().getId(), edge.getTargetNode().getId());
        }
    }

    public void finish() {
        System.out.println("Fini");
        JOptionPane.showMessageDialog(null,"Fini");
    }
}
